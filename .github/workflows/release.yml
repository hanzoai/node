name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.1.10)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      env:
        IS_TESTING: 1
      run: cargo test --workspace -- --test-threads=1

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: build-and-test
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: hanzod-linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: hanzod-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: hanzod-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: hanzod-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: hanzod-windows-amd64.exe

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }} --bin hanzod

    - name: Package binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../${{ matrix.name }}.zip hanzod.exe
        else
          tar -czf ../../../${{ matrix.name }}.tar.gz hanzod
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          *.tar.gz
          *.zip

  create-release:
    name: Create Release
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- Qwen3 model support (8B/4B variants)" >> CHANGELOG.md
        echo "- Unified storage in ~/.hanzo" >> CHANGELOG.md
        echo "- WebSocket support on port 3690" >> CHANGELOG.md
        echo "- AI mining capabilities" >> CHANGELOG.md
        echo "- LanceDB integration for RAG" >> CHANGELOG.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/**/*
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker:
    name: Publish Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          hanzoai/hanzod:latest
          hanzoai/hanzod:${{ steps.version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max